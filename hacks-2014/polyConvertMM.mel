// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Creation Date:  11 January 2002
//
//  Procedure Name:
//      polyConvertMM
//
//  Description:
//      This procedure creates the popup/marking menu
//      for poly component conversion. See buildConvertMM.
//
//  Input Arguments:
//      The parent item to parent the popup menu to.
//
//  Return Value:
//      None.


global proc polyConvertMM(string $parent){
	
	string $toEdges = (uiRes("m_polyConvertMM.kToEdges"));
	if (`popupMenu -query -exists $parent`){
		popupMenu -edit -deleteAllItems $parent;
		
		setParent -menu $parent;
		
		menuItem
			-label $toEdges
			-subMenu 1
			-radialPosition "N"
			;

			menuItem
				-label $toEdges
				-command ("ConvertSelectionToEdges;" +
				"hilite; selectType -ocm -alc false;" +
				"selectType -ocm -polymeshEdge true;")
				-radialPosition "N"
				// Added by DRL:
				-bld 1
				
				-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToEdges"))
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToContainedEdges"))
				-annotation (getRunTimeCommandAnnotation("ConvertSelectionToContainedEdges"))
				// Edited by DRL:
				-radialPosition "NE"
				// -radialPosition "S"
				-command "ConvertSelectionToContainedEdges"
				;

			// Added by DRL: {
			menuItem
				-label "To UV-border Edges"
				-annotation "Converts current selection to the edges lying on a UV border"
				-radialPosition "E"
				-command (
					"ConvertSelectionToEdges;" +
					"hilite; selectType -ocm -alc false;" +
					"selectType -ocm -polymeshEdge true;" +
					"select(texEdges(`ls -sl -fl`));"
				)
				-itl 1
				;
			// } End of added
			
			setParent -m ..;
		

		menuItem
			-label (uiRes("m_polyConvertMM.kShrinkSelection"))
			-command "ShrinkPolygonSelectionRegion"
			-radialPosition "NW"
			-annotation (getRunTimeCommandAnnotation ("ShrinkPolygonSelectionRegion"))
			;
		
		menuItem
			-label (uiRes("m_polyConvertMM.kToUVs"))
			-command ("ConvertSelectionToUVs;" +
				"hilite; selectType -ocm -alc false;" +
				"selectType -ocm -polymeshUV true;")
			-radialPosition "E"
			-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToUVs"))
			;
		
		menuItem
			-label (uiRes("m_polyConvertMM.kEdgeLoopUtilities"))
			-subMenu 1
			-radialPosition "SE"
			;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeLoop"))
				// Edited by DRL:
				-command "DRL_edgeLoop"
				-bld 1
				// -command "SelectEdgeLoopSp"
				-radialPosition "SE"
				-annotation (getRunTimeCommandAnnotation ("SelectEdgeLoop"))
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeLoopAndDelete"))
				-command "PolyConvertToLoopAndDelete;"
				-annotation (getRunTimeCommandAnnotation ("PolyConvertToLoopAndDelete"))
				-radialPosition "NE"
				-enableCommandRepeat 1
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeLoopAndDuplicate"))
				-command "PolyConvertToLoopAndDuplicate"
				-annotation (getRunTimeCommandAnnotation ("PolyConvertToLoopAndDuplicate"))
				-radialPosition "SW"
				-enableCommandRepeat 1
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kSelectEdgeLoopTool"))
				-annotation (getRunTimeCommandAnnotation ("SelectEdgeLoopTool"))
				-command ("SelectEdgeLoopTool")
				// Edited by DRL:
				-radialPosition "N"
				// -radialPosition "NW"
				;

			// Added by DRL: {
			menuItem
				-label "Loop Punktir"
				-annotation "Select one segment of repeating punktir pattern."
				-radialPosition "S"
				-command "loopPunktir();"
				-itl 1
				;
			// } End of added
			
			setParent -m ..;

		menuItem
			-label (uiRes("m_polyConvertMM.kEdgeRingUtilities"))
			-subMenu 1
			-radialPosition "SW"
			;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeRing"))
				-command "SelectEdgeRingSp"
				-radialPosition "SW"
				// Added by DRL:
				-bld 1
				
				-annotation (getRunTimeCommandAnnotation ("SelectEdgeLoop"))
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeRingAndSplit"))
				-command "PolyConvertToRingAndSplit"
				-annotation (getRunTimeCommandAnnotation ("PolyConvertToRingAndSplit"))
				-radialPosition "SE"
				-enableCommandRepeat 1
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeRingAndCollapse"))
				-command "PolyConvertToRingAndCollapse;"
				-annotation (getRunTimeCommandAnnotation ("PolyConvertToRingAndCollapse"))
				-radialPosition "NW"
				-enableCommandRepeat 1
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kSelectEdgeRingTool"))
				-annotation (getRunTimeCommandAnnotation ("SelectEdgeRingTool"))
				-command ("SelectEdgeRingTool")
				// Edited by DRL:
				-radialPosition "N"
				// -radialPosition "NE"
				;
			
			// Added by DRL: {
			menuItem
				-label "Ring Punktir"
				-annotation "Select one segment of repeating punktir pattern."
				-radialPosition "S"
				-command "ringPunktir();"
				-itl 1
				;
			// } End of added

			setParent -m ..;
			
			string $toFaces = (uiRes("m_polyConvertMM.kToFaces"));
			menuItem
				-label $toFaces
				-subMenu 1
				-radialPosition "S"
				;

				menuItem
					-label $toFaces
					-command ("ConvertSelectionToFaces;" +
					"hilite; selectType -ocm -alc false;" +
					"selectType -ocm -polymeshFace true;")
					-radialPosition "S"
					// Added by DRL:
					-bld 1
					
					-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToFaces"))
					;

				menuItem
					-label (uiRes("m_polyConvertMM.kToContainedFaces"))
					-annotation (getRunTimeCommandAnnotation("ConvertSelectionToContainedFaces"))
					// Edited by DRL:
					-radialPosition "SE"
					// -radialPosition "N"
					-command "ConvertSelectionToContainedFaces"
					;

				// Added by DRL: {
				menuItem
					-label "Grow to hard edges"
					-annotation "Converts selection to faces and grows it to select the entire soft-edged shell."
					-radialPosition "E"
					-command (
						"ConvertSelectionToFaces;" +
						"hilite; selectType -ocm -alc false;" +
						"selectType -ocm -polymeshFace true;" +
						"growToHards;"
					)
					-itl 1
					;
				// } End of added
				
				setParent -m ..;
		
		menuItem
			-label (uiRes("m_subdConvertMM.kToVertices"))
			-command ("ConvertSelectionToVertices;" +
				"hilite;	selectType -ocm -alc false;" +
				"selectType -ocm -polymeshVertex true;")
			-radialPosition "W"
			-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToVertices"))
			;
		
		menuItem
			-label (uiRes("m_polyConvertMM.kGrowSelection"))
			-command "GrowPolygonSelectionRegion"
			-radialPosition "NE"
			-annotation (getRunTimeCommandAnnotation ("GrowPolygonSelectionRegion"))
			;

		menuItem
			-label (uiRes("m_polyConvertMM.kToFacePath"))
			-command "SelectFacePath"
			-annotation (getRunTimeCommandAnnotation ("SelectFacePath"))
			;

		menuItem
			-label (uiRes("m_polyConvertMM.kToUVShell"))
			-command "polySelectBorderShell 0"
			-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToUVs"))
			;

		menuItem
			-label (uiRes("m_polyConvertMM.kToShell"))
			-command "ConvertSelectionToShell"
			-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToShell"))
			;
		
		menuItem
			-label (uiRes("m_polyConvertMM.kToShellBorder"))
			-command "ConvertSelectionToShellBorder"
			-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToShellBorder"))
			;
		
		menuItem -divider true;

		menuItem
			-label (uiRes("m_polyConvertMM.kSelectBorderEdgeTool"))
			-annotation (getRunTimeCommandAnnotation ("SelectBorderEdgeTool"))
			-command ("SelectBorderEdgeTool")
			;

		menuItem -divider true;

		menuItem
			-label (uiRes("m_polyConvertMM.kSelectionBoundary"))
			-command "SelectPolygonSelectionBoundary"
			-annotation (getRunTimeCommandAnnotation ("SelectPolygonSelectionBoundary"))
			;

		menuItem
			-label (uiRes("m_polyConvertMM.kSelectionConstraints"))
			-command "PolygonSelectionConstraints"
			-annotation (getRunTimeCommandAnnotation ("PolygonSelectionConstraints"))
			;
		
		setParent -menu ..;

		// allow user to define a proc with additional menu items
		if (`exists polyConvertUserMM`)
			polyConvertUserMM $parent;
	}
}
